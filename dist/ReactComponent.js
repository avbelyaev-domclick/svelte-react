(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('svelte/internal'), require('react'), require('react-dom'), require('svelte')) :
  typeof define === 'function' && define.amd ? define(['svelte/internal', 'react', 'react-dom', 'svelte'], factory) :
  (global = global || self, global.ReactComponent = factory(global.internal, global.React, global.ReactDOM, global.svelte));
}(this, function (internal, React, ReactDOM, svelte) { 'use strict';

  /* ReactComponent.svelte generated by Svelte v3.9.1 */

  function create_fragment(ctx) {
  	var div;

  	return {
  		c() {
  			div = internal.element("div");
  		},

  		m(target, anchor) {
  			internal.insert(target, div, anchor);
  			ctx.div_binding(div);
  		},

  		p: internal.noop,
  		i: internal.noop,
  		o: internal.noop,

  		d(detaching) {
  			if (detaching) {
  				internal.detach(div);
  			}

  			ctx.div_binding(null);
  		}
  	};
  }

  function instance($$self, $$props, $$invalidate) {
  	

    let container;

    svelte.afterUpdate(() => {
      const children = $$props.children;
      const component = $$props.this;

      const props = Object.assign({}, $$props);
      delete props.children;
      delete props.this;

      ReactDOM.render(React.createElement(component, props, children), container);
    });

    svelte.onDestroy(() => {
      ReactDOM.unmountComponentAtNode(container);
    });

  	function div_binding($$value) {
  		internal.binding_callbacks[$$value ? 'unshift' : 'push'](() => {
  			$$invalidate('container', container = $$value);
  		});
  	}

  	$$self.$set = $$new_props => {
  		$$invalidate('$$props', $$props = internal.assign(internal.assign({}, $$props), $$new_props));
  	};

  	return {
  		container,
  		div_binding,
  		$$props: $$props = internal.exclude_internal_props($$props)
  	};
  }

  class ReactComponent extends internal.SvelteComponent {
  	constructor(options) {
  		super();
  		internal.init(this, options, instance, create_fragment, internal.safe_not_equal, []);
  	}
  }

  return ReactComponent;

}));
