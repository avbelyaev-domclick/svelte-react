import { SvelteComponent, init, safe_not_equal, element, insert, noop, detach, assign, exclude_internal_props, binding_callbacks } from 'svelte/internal';
import { createElement } from 'react';
import { render, unmountComponentAtNode } from 'react-dom';
import { afterUpdate, onDestroy } from 'svelte';

/* ReactComponent.svelte generated by Svelte v3.9.1 */

function create_fragment(ctx) {
	var div;

	return {
		c() {
			div = element("div");
		},

		m(target, anchor) {
			insert(target, div, anchor);
			ctx.div_binding(div);
		},

		p: noop,
		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div);
			}

			ctx.div_binding(null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

  let container;

  afterUpdate(() => {
    const children = $$props.children;
    const component = $$props.this;

    const props = Object.assign({}, $$props);
    delete props.children;
    delete props.this;

    render(createElement(component, props, children), container);
  });

  onDestroy(() => {
    unmountComponentAtNode(container);
  });

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('container', container = $$value);
		});
	}

	$$self.$set = $$new_props => {
		$$invalidate('$$props', $$props = assign(assign({}, $$props), $$new_props));
	};

	return {
		container,
		div_binding,
		$$props: $$props = exclude_internal_props($$props)
	};
}

class ReactComponent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

export default ReactComponent;
