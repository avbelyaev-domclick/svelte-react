import { SvelteComponent, init, safe_not_equal, element, insert, noop, detach, assign, exclude_internal_props, binding_callbacks } from 'svelte/internal';
import React from 'react';
import ReactDOM from 'react-dom';
import { afterUpdate } from 'svelte';

/* ReactComponent.svelte generated by Svelte v3.9.1 */

function create_fragment(ctx) {
	var span;

	return {
		c() {
			span = element("span");
		},

		m(target, anchor) {
			insert(target, span, anchor);
			ctx.span_binding(span);
		},

		p: noop,
		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(span);
			}

			ctx.span_binding(null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

  let { children, component } = $$props;

  let root;

  afterUpdate(render);

  async function render() {
    const props = Object.assign({}, $$props);
    delete props.children;
    delete props.component;

    ReactDOM.render(React.createElement(component, props, children), root);
  }

	function span_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('root', root = $$value);
		});
	}

	$$self.$set = $$new_props => {
		$$invalidate('$$props', $$props = assign(assign({}, $$props), $$new_props));
		if ('children' in $$new_props) $$invalidate('children', children = $$new_props.children);
		if ('component' in $$new_props) $$invalidate('component', component = $$new_props.component);
	};

	return {
		children,
		component,
		root,
		span_binding,
		$$props: $$props = exclude_internal_props($$props)
	};
}

class ReactComponent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["children", "component"]);
	}
}

export default ReactComponent;
